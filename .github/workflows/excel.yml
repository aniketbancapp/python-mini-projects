name: SonarQube Scan with HTML Report

on:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, synchronize, reopened]

env:
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  sonarqube-scan:
    name: SonarQube Scan with HTML Report
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=your-project-key
            -Dsonar.projectName="Your Project Name"
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=.
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
            -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.xunit.reportPath=tests.xml

      - name: Verify analysis completion
        run: |
          echo "Checking analysis status..."
          CE_TASK_ID=$(grep "ceTaskId=" .scannerwork/report-task.txt | cut -d'=' -f2)
          echo "Task ID: $CE_TASK_ID"

          for i in {1..30}; do
            TASK_STATUS=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/ce/task?id=$CE_TASK_ID" | jq -r '.task.status')
            echo "Attempt $i: Status - $TASK_STATUS"
            
            case "$TASK_STATUS" in
              "SUCCESS") break ;;
              "FAILED"|"CANCELED") 
                echo "Analysis failed or was canceled"
                exit 1 ;;
              *)
                if [ $i -eq 30 ]; then
                  echo "Timeout waiting for analysis completion"
                  exit 1
                fi
                sleep 5 ;;
            esac
          done

      - name: Wait for metrics calculation
        run: sleep 15  # Give SonarQube time to calculate all metrics

      - name: Generate HTML Report
        run: |
          # Get all required data
          PROJECT_KEY=$(grep "projectKey=" .scannerwork/report-task.txt | cut -d'=' -f2)
          DASHBOARD_URL=$(grep "dashboardUrl=" .scannerwork/report-task.txt | cut -d'=' -f2)
          CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S")
          
          # Function to safely get JSON data
          safe_curl() {
            local url=$1
            local result=$(curl -s -u "$SONAR_TOKEN:" "$url" || echo '{}')
            if [ -z "$result" ] || [ "$result" = "null" ]; then
              echo '{}'
            else
              echo "$result"
            fi
          }
          
          # Get measures with all required metrics
          MEASURES_JSON=$(safe_curl "$SONAR_HOST_URL/api/measures/component?component=$PROJECT_KEY&metricKeys=bugs,vulnerabilities,code_smells,security_hotspots,duplicated_lines_density,reliability_rating,security_rating,sqale_rating,security_review_rating,ncloc,coverage")
          
          # Debug output
          echo "Measures JSON:"
          echo "$MEASURES_JSON"
          
          # Function to extract metric with default value
          extract_metric() {
            local json="$1"
            local metric="$2"
            local default="$3"
            local value=$(echo "$json" | jq -r --arg metric "$metric" '.component.measures[]? | select(.metric == $metric) | .value // empty')
            echo "${value:-$default}"
          }
          
          # Extract metrics with defaults
          BUGS=$(extract_metric "$MEASURES_JSON" "bugs" "0")
          VULNERABILITIES=$(extract_metric "$MEASURES_JSON" "vulnerabilities" "0")
          CODE_SMELLS=$(extract_metric "$MEASURES_JSON" "code_smells" "0")
          SECURITY_HOTSPOTS=$(extract_metric "$MEASURES_JSON" "security_hotspots" "0")
          DUPLICATION=$(extract_metric "$MEASURES_JSON" "duplicated_lines_density" "0")
          COVERAGE=$(extract_metric "$MEASURES_JSON" "coverage" "0")
          NCLOC=$(extract_metric "$MEASURES_JSON" "ncloc" "0")
          
          RELIABILITY_RATING=$(extract_metric "$MEASURES_JSON" "reliability_rating" "1.0")
          SECURITY_RATING=$(extract_metric "$MEASURES_JSON" "security_rating" "1.0")
          MAINTAINABILITY_RATING=$(extract_metric "$MEASURES_JSON" "sqale_rating" "1.0")
          SECURITY_REVIEW_RATING=$(extract_metric "$MEASURES_JSON" "security_review_rating" "1.0")
          
          # Convert ratings to letter grades
          convert_rating_to_letter() {
            case $1 in
              "1.0") echo "A" ;;
              "2.0") echo "B" ;;
              "3.0") echo "C" ;;
              "4.0") echo "D" ;;
              "5.0") echo "E" ;;
              *) echo "N/A" ;;
            esac
          }
          
          BUG_GRADE=$(convert_rating_to_letter "$RELIABILITY_RATING")
          VULNERABILITY_GRADE=$(convert_rating_to_letter "$SECURITY_RATING")
          CODE_SMELL_GRADE=$(convert_rating_to_letter "$MAINTAINABILITY_RATING")
          HOTSPOT_GRADE=$(convert_rating_to_letter "$SECURITY_REVIEW_RATING")
          
          # Get issues data
          ISSUES_JSON=$(safe_curl "$SONAR_HOST_URL/api/issues/search?componentKeys=$PROJECT_KEY&resolved=false&ps=500")
          
          # Get counts by severity with defaults
          BLOCKER_COUNT=$(echo "$ISSUES_JSON" | jq '[.issues[] | select(.severity == "BLOCKER")] | length // 0')
          CRITICAL_COUNT=$(echo "$ISSUES_JSON" | jq '[.issues[] | select(.severity == "CRITICAL")] | length // 0')
          MAJOR_COUNT=$(echo "$ISSUES_JSON" | jq '[.issues[] | select(.severity == "MAJOR")] | length // 0')
          MINOR_COUNT=$(echo "$ISSUES_JSON" | jq '[.issues[] | select(.severity == "MINOR")] | length // 0')
          INFO_COUNT=$(echo "$ISSUES_JSON" | jq '[.issues[] | select(.severity == "INFO")] | length // 0')
          TOTAL_ISSUES=$(($BLOCKER_COUNT + $CRITICAL_COUNT + $MAJOR_COUNT + $MINOR_COUNT + $INFO_COUNT))
          
          # Get security hotspot counts
          HOTSPOT_LOW=$(safe_curl "$SONAR_HOST_URL/api/hotspots/search?projectKey=$PROJECT_KEY&status=TO_REVIEW&vulnerabilityProbability=LOW" | jq '.paging.total // 0')
          HOTSPOT_MEDIUM=$(safe_curl "$SONAR_HOST_URL/api/hotspots/search?projectKey=$PROJECT_KEY&status=TO_REVIEW&vulnerabilityProbability=MEDIUM" | jq '.paging.total // 0')
          HOTSPOT_HIGH=$(safe_curl "$SONAR_HOST_URL/api/hotspots/search?projectKey=$PROJECT_KEY&status=TO_REVIEW&vulnerabilityProbability=HIGH" | jq '.paging.total // 0')
          HOTSPOT_TOTAL=$(($HOTSPOT_LOW + $HOTSPOT_MEDIUM + $HOTSPOT_HIGH))

          # Create HTML report
          cat <<EOF > sonar-report.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SonarQube Report - $PROJECT_KEY</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
    .container { max-width: 1200px; margin: 0 auto; }
    table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
    th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
    th { background-color: #f2f2f2; font-weight: bold; }
    .header { margin-bottom: 30px; padding-bottom: 15px; border-bottom: 1px solid #eee; }
    .section-title { font-weight: bold; margin: 25px 0 15px 0; font-size: 1.2em; color: #333; }
    .metric-card { 
      background: #f9f9f9; 
      border-radius: 5px; 
      padding: 15px; 
      margin-bottom: 15px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-row { display: flex; flex-wrap: wrap; gap: 15px; margin-bottom: 20px; }
    .metric-box { 
      flex: 1; 
      min-width: 200px; 
      background: white; 
      padding: 15px; 
      border-radius: 5px; 
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .grade-A { color: #00aa00; font-weight: bold; }
    .grade-B { color: #8db600; font-weight: bold; }
    .grade-C { color: #f4c430; font-weight: bold; }
    .grade-D { color: #ff7400; font-weight: bold; }
    .grade-E { color: #ff0000; font-weight: bold; }
    .severity-BLOCKER { color: #ff0000; }
    .severity-CRITICAL { color: #ff7400; }
    .severity-MAJOR { color: #f4c430; }
    .severity-MINOR { color: #8db600; }
    .severity-INFO { color: #00aa00; }
    .footer { margin-top: 30px; padding-top: 15px; border-top: 1px solid #eee; font-size: 0.9em; color: #666; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>SonarQube Quality Report</h1>
      <h2>$PROJECT_KEY</h2>
      <p>Generated on: $CURRENT_DATE</p>
      <p>View full report: <a href="$DASHBOARD_URL" target="_blank">$DASHBOARD_URL</a></p>
    </div>

    <div class="section-title">Project Overview</div>
    <div class="metric-row">
      <div class="metric-box">
        <h3>Lines of Code</h3>
        <p style="font-size: 1.5em;">$NCLOC</p>
      </div>
      <div class="metric-box">
        <h3>Coverage</h3>
        <p style="font-size: 1.5em;">$COVERAGE%</p>
      </div>
      <div class="metric-box">
        <h3>Duplications</h3>
        <p style="font-size: 1.5em;">$DUPLICATION%</p>
      </div>
    </div>

    <div class="section-title">Quality Gate Metrics</div>
    <div class="metric-row">
      <div class="metric-box">
        <h3>Bugs</h3>
        <p style="font-size: 1.5em;">$BUGS <span class="grade-$BUG_GRADE">($BUG_GRADE)</span></p>
      </div>
      <div class="metric-box">
        <h3>Vulnerabilities</h3>
        <p style="font-size: 1.5em;">$VULNERABILITIES <span class="grade-$VULNERABILITY_GRADE">($VULNERABILITY_GRADE)</span></p>
      </div>
      <div class="metric-box">
        <h3>Code Smells</h3>
        <p style="font-size: 1.5em;">$CODE_SMELLS <span class="grade-$CODE_SMELL_GRADE">($CODE_SMELL_GRADE)</span></p>
      </div>
      <div class="metric-box">
        <h3>Security Hotspots</h3>
        <p style="font-size: 1.5em;">$SECURITY_HOTSPOTS <span class="grade-$HOTSPOT_GRADE">($HOTSPOT_GRADE)</span></p>
      </div>
    </div>

    <div class="section-title">Issues Breakdown</div>
    <table>
      <tr>
        <th>Severity</th>
        <th>Count</th>
        <th>Percentage</th>
      </tr>
      <tr>
        <td class="severity-BLOCKER">Blocker</td>
        <td>$BLOCKER_COUNT</td>
        <td>$((BLOCKER_COUNT * 100 / (TOTAL_ISSUES > 0 ? TOTAL_ISSUES : 1)))%</td>
      </tr>
      <tr>
        <td class="severity-CRITICAL">Critical</td>
        <td>$CRITICAL_COUNT</td>
        <td>$((CRITICAL_COUNT * 100 / (TOTAL_ISSUES > 0 ? TOTAL_ISSUES : 1)))%</td>
      </tr>
      <tr>
        <td class="severity-MAJOR">Major</td>
        <td>$MAJOR_COUNT</td>
        <td>$((MAJOR_COUNT * 100 / (TOTAL_ISSUES > 0 ? TOTAL_ISSUES : 1)))%</td>
      </tr>
      <tr>
        <td class="severity-MINOR">Minor</td>
        <td>$MINOR_COUNT</td>
        <td>$((MINOR_COUNT * 100 / (TOTAL_ISSUES > 0 ? TOTAL_ISSUES : 1)))%</td>
      </tr>
      <tr>
        <td class="severity-INFO">Info</td>
        <td>$INFO_COUNT</td>
        <td>$((INFO_COUNT * 100 / (TOTAL_ISSUES > 0 ? TOTAL_ISSUES : 1)))%</td>
      </tr>
      <tr>
        <th>Total Issues</th>
        <th>$TOTAL_ISSUES</th>
        <th>100%</th>
      </tr>
    </table>

    <div class="section-title">Security Hotspots</div>
    <table>
      <tr>
        <th>Risk Level</th>
        <th>Count</th>
      </tr>
      <tr>
        <td>High</td>
        <td>$HOTSPOT_HIGH</td>
      </tr>
      <tr>
        <td>Medium</td>
        <td>$HOTSPOT_MEDIUM</td>
      </tr>
      <tr>
        <td>Low</td>
        <td>$HOTSPOT_LOW</td>
      </tr>
      <tr>
        <th>Total Hotspots</th>
        <th>$HOTSPOT_TOTAL</th>
      </tr>
    </table>

    <div class="footer">
      <p>Report generated automatically by GitHub Actions</p>
      <p>SonarQube version: $(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/server/version" | jq -r .)</p>
    </div>
  </div>
</body>
</html>
EOF

          echo "HTML report generated at sonar-report.html"

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: sonar-report.html
