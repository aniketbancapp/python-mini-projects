name: SonarQube Scan with HTML Report and Optimized Deployment

on:
  push:
    branches: [ master ]

env:
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  sonarqube-scan:
    name: SonarQube Scan with HTML Report
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=python
            -Dsonar.projectName="Python Project"
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=.
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
            -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Verify analysis completion
        run: |
          echo "Checking analysis status..."
          CE_TASK_ID=$(grep "ceTaskId=" .scannerwork/report-task.txt | cut -d'=' -f2)
          echo "Task ID: $CE_TASK_ID"

          for i in {1..30}; do
            TASK_STATUS=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/ce/task?id=$CE_TASK_ID" | jq -r '.task.status')
            echo "Attempt $i: Status - $TASK_STATUS"
            
            case "$TASK_STATUS" in
              "SUCCESS") break ;;
              "FAILED"|"CANCELED") 
                echo "Analysis failed or was canceled"
                exit 1 ;;
              *)
                if [ $i -eq 30 ]; then
                  echo "Timeout waiting for analysis completion"
                  exit 1
                fi
                sleep 5 ;;
            esac
          done

      - name: Generate HTML Report
        run: |
          # Get all required data
          PROJECT_KEY=$(grep "projectKey=" .scannerwork/report-task.txt | cut -d'=' -f2)
          DASHBOARD_URL=$(grep "dashboardUrl=" .scannerwork/report-task.txt | cut -d'=' -f2)
          CURRENT_DATE=$(date +"%m/%d/%Y")
          
          # Function to safely get JSON data
          safe_curl() {
            local url=$1
            local result=$(curl -s -u "$SONAR_TOKEN:" "$url" || echo '{}')
            if [ -z "$result" ] || [ "$result" = "null" ]; then
              echo '{}'
            else
              echo "$result"
            fi
          }
          
          # Get data with error handling
          ISSUES_JSON=$(safe_curl "$SONAR_HOST_URL/api/issues/search?componentKeys=$PROJECT_KEY&resolved=false&ps=500")
          MEASURES_JSON=$(safe_curl "$SONAR_HOST_URL/api/measures/component?component=$PROJECT_KEY&metricKeys=bugs,vulnerabilities,code_smells,security_hotspots,duplicated_lines_density,reliability_rating,security_rating,sqale_rating,security_review_rating")
          
          # Extract specific metrics with defaults (corrected jq syntax)
          BUGS=$(echo "$MEASURES_JSON" | jq -r '.component.measures[] | select(.metric == "bugs")?.value // "0"')
          VULNERABILITIES=$(echo "$MEASURES_JSON" | jq -r '.component.measures[] | select(.metric == "vulnerabilities")?.value // "0"')
          CODE_SMELLS=$(echo "$MEASURES_JSON" | jq -r '.component.measures[] | select(.metric == "code_smells")?.value // "0"')
          SECURITY_HOTSPOTS=$(echo "$MEASURES_JSON" | jq -r '.component.measures[] | select(.metric == "security_hotspots")?.value // "0"')
          DUPLICATION=$(echo "$MEASURES_JSON" | jq -r '.component.measures[] | select(.metric == "duplicated_lines_density")?.value // "0"')
          
          # Get ratings with defaults
          RELIABILITY_RATING=$(echo "$MEASURES_JSON" | jq -r '.component.measures[] | select(.metric == "reliability_rating")?.value // "1.0"')
          SECURITY_RATING=$(echo "$MEASURES_JSON" | jq -r '.component.measures[] | select(.metric == "security_rating")?.value // "1.0"')
          MAINTAINABILITY_RATING=$(echo "$MEASURES_JSON" | jq -r '.component.measures[] | select(.metric == "sqale_rating")?.value // "1.0"')
          SECURITY_REVIEW_RATING=$(echo "$MEASURES_JSON" | jq -r '.component.measures[] | select(.metric == "security_review_rating")?.value // "1.0"')
          
          # Convert ratings to letter grades
          convert_rating_to_letter() {
            case $1 in
              "1.0") echo "A" ;;
              "2.0") echo "B" ;;
              "3.0") echo "C" ;;
              "4.0") echo "D" ;;
              "5.0") echo "E" ;;
              *) echo "N/A" ;;
            esac
          }
          
          BUG_GRADE=$(convert_rating_to_letter "$RELIABILITY_RATING")
          VULNERABILITY_GRADE=$(convert_rating_to_letter "$SECURITY_RATING")
          CODE_SMELL_GRADE=$(convert_rating_to_letter "$MAINTAINABILITY_RATING")
          HOTSPOT_GRADE=$(convert_rating_to_letter "$SECURITY_REVIEW_RATING")
          
          # Get counts by severity with defaults
          BLOCKER_COUNT=$(echo "$ISSUES_JSON" | jq '[.issues[] | select(.severity == "BLOCKER")] | length // 0')
          CRITICAL_COUNT=$(echo "$ISSUES_JSON" | jq '[.issues[] | select(.severity == "CRITICAL")] | length // 0')
          MAJOR_COUNT=$(echo "$ISSUES_JSON" | jq '[.issues[] | select(.severity == "MAJOR")] | length // 0')
          MINOR_COUNT=$(echo "$ISSUES_JSON" | jq '[.issues[] | select(.severity == "MINOR")] | length // 0')
          INFO_COUNT=$(echo "$ISSUES_JSON" | jq '[.issues[] | select(.severity == "INFO")] | length // 0')
          TOTAL_ISSUES=$(($BLOCKER_COUNT + $CRITICAL_COUNT + $MAJOR_COUNT + $MINOR_COUNT + $INFO_COUNT))
          
          # Get security hotspot counts with defaults
          HOTSPOT_LOW=$(safe_curl "$SONAR_HOST_URL/api/hotspots/search?projectKey=$PROJECT_KEY&status=TO_REVIEW&vulnerabilityProbability=LOW" | jq '.paging.total // 0')
          HOTSPOT_MEDIUM=$(safe_curl "$SONAR_HOST_URL/api/hotspots/search?projectKey=$PROJECT_KEY&status=TO_REVIEW&vulnerabilityProbability=MEDIUM" | jq '.paging.total // 0')
          HOTSPOT_HIGH=$(safe_curl "$SONAR_HOST_URL/api/hotspots/search?projectKey=$PROJECT_KEY&status=TO_REVIEW&vulnerabilityProbability=HIGH" | jq '.paging.total // 0')
          HOTSPOT_TOTAL=$(($HOTSPOT_LOW + $HOTSPOT_MEDIUM + $HOTSPOT_HIGH))

          # Create HTML report
          cat <<EOF > sonar-report.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SonarQube Report - $PROJECT_KEY</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    th { background-color: #f2f2f2; }
    .header { margin-bottom: 30px; }
    .section-title { font-weight: bold; margin: 20px 0 10px 0; }
    .grade-A { color: green; font-weight: bold; }
    .grade-B { color: #9ACD32; font-weight: bold; }
    .grade-C { color: orange; font-weight: bold; }
    .grade-D { color: #FF6347; font-weight: bold; }
    .grade-E { color: red; font-weight: bold; }
  </style>
</head>
<body>
  <div class="header">
    <h1>SonarQube Scan Report - $PROJECT_KEY</h1>
    <p>Date: $CURRENT_DATE</p>
    <p>Project Dashboard: <a href="$DASHBOARD_URL" target="_blank">View Dashboard</a></p>
  </div>

  <div class="section-title">Summary</div>
  <table>
    <tr><th>Total Issues</th><td>$TOTAL_ISSUES</td></tr>
    <tr><th>Bugs</th><td>$BUGS <span class="grade-$BUG_GRADE">($BUG_GRADE)</span></td></tr>
    <tr><th>Vulnerabilities</th><td>$VULNERABILITIES <span class="grade-$VULNERABILITY_GRADE">($VULNERABILITY_GRADE)</span></td></tr>
    <tr><th>Code Smells</th><td>$CODE_SMELLS <span class="grade-$CODE_SMELL_GRADE">($CODE_SMELL_GRADE)</span></td></tr>
    <tr><th>Security Hotspots</th><td>$SECURITY_HOTSPOTS <span class="grade-$HOTSPOT_GRADE">($HOTSPOT_GRADE)</span></td></tr>
    <tr><th>Duplications</th><td>$DUPLICATION%</td></tr>
  </table>

  <div class="section-title">Issues by Severity</div>
  <table>
    <tr><th>Blocker</th><td>$BLOCKER_COUNT</td></tr>
    <tr><th>Critical</th><td>$CRITICAL_COUNT</td></tr>
    <tr><th>Major</th><td>$MAJOR_COUNT</td></tr>
    <tr><th>Minor</th><td>$MINOR_COUNT</td></tr>
    <tr><th>Info</th><td>$INFO_COUNT</td></tr>
  </table>

  <div class="section-title">Security Hotspots</div>
  <table>
    <tr><th>Low</th><td>$HOTSPOT_LOW</td></tr>
    <tr><th>Medium</th><td>$HOTSPOT_MEDIUM</td></tr>
    <tr><th>High</th><td>$HOTSPOT_HIGH</td></tr>
    <tr><th>Total Hotspots</th><td>$HOTSPOT_TOTAL</td></tr>
  </table>
</body>
</html>
EOF
          echo "HTML report generated at sonar-report.html"

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: sonar-report.html
