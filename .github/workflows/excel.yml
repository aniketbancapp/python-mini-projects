name: SonarQube Scan with Enhanced Report

on:
  push:
    branches: [ master ]

env:
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  sonarqube-scan:
    name: SonarQube Scan with Enhanced Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl pandoc

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=python
            -Dsonar.projectName="Python Project"
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=.
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }}
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      - name: Verify analysis completion
        run: |
          echo "Waiting for SonarQube analysis to complete..."

          if [ ! -f .scannerwork/report-task.txt ]; then
            echo "Error: report-task.txt not found!"
            exit 1
          fi

          CE_TASK_ID=$(grep "ceTaskId=" .scannerwork/report-task.txt | cut -d'=' -f2)
          echo "Task ID: $CE_TASK_ID"

          for i in {1..30}; do
            TASK_STATUS=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/ce/task?id=$CE_TASK_ID" | jq -r '.task.status')
            echo "Attempt $i: Status - $TASK_STATUS"

            if [ "$TASK_STATUS" = "SUCCESS" ]; then
              break
            elif [ "$TASK_STATUS" = "FAILED" ] || [ "$TASK_STATUS" = "CANCELED" ]; then
              echo "Analysis failed or was canceled"
              exit 1
            elif [ $i -eq 30 ]; then
              echo "Timeout waiting for analysis completion"
              exit 1
            fi
            sleep 5
          done

      - name: Generate Enhanced SonarQube Report
        run: |
          set -e

          PROJECT_KEY=$(grep "projectKey=" .scannerwork/report-task.txt | cut -d'=' -f2)
          DASHBOARD_URL=$(grep "dashboardUrl=" .scannerwork/report-task.txt | cut -d'=' -f2)
          CURRENT_DATE=$(date +"%d-%m-%Y")
          COMMIT_ID=${GITHUB_SHA:0:7}

          sonar_api_call() {
            local endpoint="$1"
            curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/$endpoint"
          }

          MEASURES=$(sonar_api_call "measures/component?component=$PROJECT_KEY&metricKeys=bugs,vulnerabilities,code_smells,security_hotspots,duplicated_lines_density,coverage,ncloc,reliability_rating,security_rating,sqale_rating,security_review_rating")
          ISSUES=$(sonar_api_call "issues/search?componentKeys=$PROJECT_KEY&resolved=false&ps=500")
          HOTSPOTS=$(sonar_api_call "hotspots/search?projectKey=$PROJECT_KEY&status=TO_REVIEW")

          extract_metric() {
            echo "$1" | jq -r --arg metric "$2" '.component.measures[]? | select(.metric == $metric) | .value' || echo "0"
          }

          BUGS=$(extract_metric "$MEASURES" "bugs")
          VULNERABILITIES=$(extract_metric "$MEASURES" "vulnerabilities")
          CODE_SMELLS=$(extract_metric "$MEASURES" "code_smells")
          SECURITY_HOTSPOTS=$(extract_metric "$MEASURES" "security_hotspots")
          DUPLICATION=$(extract_metric "$MEASURES" "duplicated_lines_density")
          COVERAGE=$(extract_metric "$MEASURES" "coverage")
          NCLOC=$(extract_metric "$MEASURES" "ncloc")

          RELIABILITY_RATING=$(extract_metric "$MEASURES" "reliability_rating")
          SECURITY_RATING=$(extract_metric "$MEASURES" "security_rating")
          MAINTAINABILITY_RATING=$(extract_metric "$MEASURES" "sqale_rating")
          SECURITY_REVIEW_RATING=$(extract_metric "$MEASURES" "security_review_rating")

          convert_rating() {
            case $1 in
              "1.0") echo "A";;
              "2.0") echo "B";;
              "3.0") echo "C";;
              "4.0") echo "D";;
              "5.0") echo "E";;
              *) echo "N/A";;
            esac
          }

          BUG_GRADE=$(convert_rating "$RELIABILITY_RATING")
          VULN_GRADE=$(convert_rating "$SECURITY_RATING")
          CODE_GRADE=$(convert_rating "$MAINTAINABILITY_RATING")
          HOTSPOT_GRADE=$(convert_rating "$SECURITY_REVIEW_RATING")

          BLOCKER=$(echo "$ISSUES" | jq '[.issues[] | select(.severity == "BLOCKER")] | length')
          CRITICAL=$(echo "$ISSUES" | jq '[.issues[] | select(.severity == "CRITICAL")] | length')
          MAJOR=$(echo "$ISSUES" | jq '[.issues[] | select(.severity == "MAJOR")] | length')
          MINOR=$(echo "$ISSUES" | jq '[.issues[] | select(.severity == "MINOR")] | length')
          INFO=$(echo "$ISSUES" | jq '[.issues[] | select(.severity == "INFO")] | length')
          TOTAL_ISSUES=$((BLOCKER + CRITICAL + MAJOR + MINOR + INFO))

          HOTSPOT_LOW=$(echo "$HOTSPOTS" | jq '[.hotspots[] | select(.vulnerabilityProbability == "LOW")] | length')
          HOTSPOT_MEDIUM=$(echo "$HOTSPOTS" | jq '[.hotspots[] | select(.vulnerabilityProbability == "MEDIUM")] | length')
          HOTSPOT_HIGH=$(echo "$HOTSPOTS" | jq '[.hotspots[] | select(.vulnerabilityProbability == "HIGH")] | length')
          TOTAL_HOTSPOTS=$((HOTSPOT_LOW + HOTSPOT_MEDIUM + HOTSPOT_HIGH))

          cat <<EOF > sonar-report.md
          # SonarQube Analysis Report

          ## Git URL
          ${{ github.server_url }}/${{ github.repository }}

          ### Branch Name
          ${{ github.ref_name }}

          ### Review Date
          $CURRENT_DATE

          ### Commit ID
          $COMMIT_ID

          ---

          | Overall Findings | Sonar issues | Sonar security hotspots | Sonar duplications |
          |------------------|--------------|--------------------------|---------------------|
          | **Tool**         | **Count**    | **Severity**             | **No. of findings** |
          | **Sonar**        | $TOTAL_ISSUES | **Blocker**: $BLOCKER     | **Low**: $HOTSPOT_LOW |
          |                  |              | **Critical**: $CRITICAL   | **Medium**: $HOTSPOT_MEDIUM |
          |                  |              | **Major**: $MAJOR         | **High**: $HOTSPOT_HIGH |
          |                  |              | **Minor**: $MINOR         | **Total**: $TOTAL_HOTSPOTS |
          |                  |              | **Info**: $INFO           |                     |
          |                  |              | **Total**: $TOTAL_ISSUES  |                     |

          ---

          ### SonarQube Grades
          | Category          | Grade | Description              |
          |-------------------|-------|--------------------------|
          | Bugs              | $BUG_GRADE | Reliability rating     |
          | Vulnerabilities   | $VULN_GRADE | Security rating        |
          | Code Smells       | $CODE_GRADE | Maintainability rating |
          | Security Hotspots | $HOTSPOT_GRADE | Security Review rating |

          ---

          ### Summary
          - Total Issues: $TOTAL_ISSUES
          - Security Hotspots: $TOTAL_HOTSPOTS
          - Code Duplication: $DUPLICATION%
          - Test Coverage: $COVERAGE%

          [View Full Report]($DASHBOARD_URL)
          EOF

          pandoc sonar-report.md -o sonar-report.html
          echo "Generated report:"
          cat sonar-report.md

      - name: Upload Markdown Report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report-md
          path: sonar-report.md

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report-html
          path: sonar-report.html
